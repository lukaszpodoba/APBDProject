// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Contexts;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Models.Agreement", b =>
                {
                    b.Property<int>("AgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgreementId"));

                    b.Property<decimal>("AgreementCurrentDeposited")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("CurrentDeposited");

                    b.Property<string>("AgreementCurrentSoftwareVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CurrentSoftwareVersion");

                    b.Property<DateTime>("AgreementEndOfVersionSupport")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndOfVersionSupport");

                    b.Property<DateTime>("AgreementPaymentFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("PaymentFrom");

                    b.Property<DateTime>("AgreementPaymentUntil")
                        .HasColumnType("datetime2")
                        .HasColumnName("PaymentUntil");

                    b.Property<decimal>("AgreementPrice")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("Price");

                    b.Property<bool>("AgreementSigned")
                        .HasColumnType("bit")
                        .HasColumnName("Signed");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("SoftwareId");

                    b.HasKey("AgreementId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Agreement");
                });

            modelBuilder.Entity("Project.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientAdress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Address");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<bool>("ClientIsReturning")
                        .HasColumnType("bit")
                        .HasColumnName("Returning");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("Phone");

                    b.HasKey("ClientId");

                    b.ToTable("Clients", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Project.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("DiscountFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("DiscountFrom");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<decimal>("DiscountPercentageValue")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("PercentageValue");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Type");

                    b.Property<DateTime>("DiscountUntil")
                        .HasColumnType("datetime2")
                        .HasColumnName("DiscountUntil");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("SoftwareId");

                    b.HasKey("DiscountId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Discount");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            DiscountFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountName = "Student",
                            DiscountPercentageValue = 50m,
                            DiscountType = "Agreement",
                            DiscountUntil = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoftwareId = 1
                        },
                        new
                        {
                            DiscountId = 2,
                            DiscountFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountName = "Sale",
                            DiscountPercentageValue = 30m,
                            DiscountType = "Agreement",
                            DiscountUntil = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoftwareId = 1
                        },
                        new
                        {
                            DiscountId = 3,
                            DiscountFrom = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountName = "Summer",
                            DiscountPercentageValue = 80m,
                            DiscountType = "Agreement",
                            DiscountUntil = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoftwareId = 1
                        });
                });

            modelBuilder.Entity("Project.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int")
                        .HasColumnName("AgreementId");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<decimal>("PaymentPrice")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("Price");

                    b.HasKey("PaymentId");

                    b.HasIndex("AgreementId");

                    b.HasIndex("ClientId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Project.Models.Software", b =>
                {
                    b.Property<int>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwareId"));

                    b.Property<string>("SoftwareCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Category");

                    b.Property<string>("SoftwareCurrentVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CurrentVersion");

                    b.Property<string>("SoftwareDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Description");

                    b.Property<bool>("SoftwareIsOneTimePurchase")
                        .HasColumnType("bit")
                        .HasColumnName("IsOneTimePurchase");

                    b.Property<bool>("SoftwareIsSubscriptionPurchase")
                        .HasColumnType("bit")
                        .HasColumnName("IsSubscriptionPurchase");

                    b.Property<string>("SoftwareName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<decimal?>("SoftwareOneTimePrice")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("OneTimePrice");

                    b.Property<decimal?>("SoftwareSubscriptionPrice")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("SubscriptionPrice");

                    b.HasKey("SoftwareId");

                    b.ToTable("Software");

                    b.HasData(
                        new
                        {
                            SoftwareId = 1,
                            SoftwareCategory = "Antivirus",
                            SoftwareCurrentVersion = "1.0",
                            SoftwareDescription = "Antivirus software",
                            SoftwareIsOneTimePurchase = true,
                            SoftwareIsSubscriptionPurchase = false,
                            SoftwareName = "Kaspersky",
                            SoftwareOneTimePrice = 1000m
                        },
                        new
                        {
                            SoftwareId = 2,
                            SoftwareCategory = "Office",
                            SoftwareCurrentVersion = "1.0",
                            SoftwareDescription = "Office software",
                            SoftwareIsOneTimePurchase = true,
                            SoftwareIsSubscriptionPurchase = false,
                            SoftwareName = "Microsoft Office",
                            SoftwareOneTimePrice = 300m
                        });
                });

            modelBuilder.Entity("Project.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("SoftwareId");

                    b.Property<string>("SubscriptionCurrentSoftwareVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentSoftwareVersion");

                    b.Property<DateTime>("SubscriptionFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("From");

                    b.Property<decimal>("SubscriptionPrice")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("Price");

                    b.Property<DateTime>("SubscriptionUntil")
                        .HasColumnType("datetime2")
                        .HasColumnName("Until");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Project.Models.Business", b =>
                {
                    b.HasBaseType("Project.Models.Client");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("KRS")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("KRS");

                    b.ToTable("Businesses", (string)null);
                });

            modelBuilder.Entity("Project.Models.Individual", b =>
                {
                    b.HasBaseType("Project.Models.Client");

                    b.Property<DateTime?>("IndividualDeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("IndividualFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("IndividualLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("IndividualPesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("PESEL");

                    b.ToTable("Individuals", (string)null);
                });

            modelBuilder.Entity("Project.Models.Agreement", b =>
                {
                    b.HasOne("Project.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Project.Models.Discount", b =>
                {
                    b.HasOne("Project.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Project.Models.Payment", b =>
                {
                    b.HasOne("Project.Models.Agreement", "Agreement")
                        .WithMany("Payments")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agreement");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Project.Models.Subscription", b =>
                {
                    b.HasOne("Project.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Project.Models.Business", b =>
                {
                    b.HasOne("Project.Models.Client", null)
                        .WithOne()
                        .HasForeignKey("Project.Models.Business", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.Individual", b =>
                {
                    b.HasOne("Project.Models.Client", null)
                        .WithOne()
                        .HasForeignKey("Project.Models.Individual", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.Agreement", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Project.Models.Client", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
